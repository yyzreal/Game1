#pragma once
#ifndef __XMUTEX_H__
#define __XMUTEX_H__

#include "XDeclare.h"

//-------------------------------------------------------------------------------------
// 无锁
//-------------------------------------------------------------------------------------
class XDummyMutex
{
public:
	//-------------------------------------------------------------------------------------
	void Lock()
	{
	}

	//-------------------------------------------------------------------------------------
	void Unlock()
	{
	}

	//-------------------------------------------------------------------------------------
	BOOL TryLock()
	{
		return TRUE;
	}
};

//-------------------------------------------------------------------------------------
// 原子锁，提供最大的访问速度，但不可线程冲入
//-------------------------------------------------------------------------------------
class XAtomMutex
{
public:
	//-------------------------------------------------------------------------------------
	XAtomMutex() : m_lock(0)
	{
	}

	//-------------------------------------------------------------------------------------
	void Lock()
	{
		while (::InterlockedCompareExchange((LPLONG)&m_lock, 1, 0) != 0)
		{
			Sleep(0);
		}
	}

	//-------------------------------------------------------------------------------------
	void Unlock()
	{
		::InterlockedExchange((LPLONG)(&m_lock), 0);
	}

	//-------------------------------------------------------------------------------------
	BOOL TryLock()
	{
		return ::InterlockedCompareExchange((LPLONG)&m_lock, 1, 0) == 0;\
	}

private:
	// 原子计数
	volatile int	m_lock;
};

//-----------------------------------------------------------------------------
// 线程锁――CriticalSection的封装
//-----------------------------------------------------------------------------
class XMutex
{
public:
	//-----------------------------------------------------------------------------
	XMutex()
	{
		if (FALSE == ::InitializeCriticalSectionAndSpinCount(&cs, 4000))
		{
			abort();
		}
	}

	//-----------------------------------------------------------------------------
	~XMutex()
	{
		::DeleteCriticalSection(&cs);
	}

	//-----------------------------------------------------------------------------
	void Lock()
	{
		::EnterCriticalSection(&cs);
	}

	//-----------------------------------------------------------------------------
	void Unlock()
	{
		::LeaveCriticalSection(&cs);
	}

	//-----------------------------------------------------------------------------
	BOOL TryLock()
	{
		return ::TryEnterCriticalSection(&cs);
	}

private:
	//-----------------------------------------------------------------------------
	XMutex(const XMutex& mutex)
	{
	}

	//-----------------------------------------------------------------------------
	const XMutex& operator=(const XMutex& mutex)
	{
	}

protected:
	//-----------------------------------------------------------------------------
	CRITICAL_SECTION	cs;
};

#endif // !__XMUTEX_H__
